/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import { Program, ProgramError } from '@metaplex-foundation/umi';

type ProgramErrorConstructor = new (
  program: Program,
  cause?: Error
) => ProgramError;
const codeToErrorMap: Map<number, ProgramErrorConstructor> = new Map();
const nameToErrorMap: Map<string, ProgramErrorConstructor> = new Map();

/** MathOverflow: Overflow in arithmetic operation */
export class MathOverflowError extends ProgramError {
  override readonly name: string = 'MathOverflow';

  readonly code: number = 0x1770; // 6000

  constructor(program: Program, cause?: Error) {
    super('Overflow in arithmetic operation', program, cause);
  }
}
codeToErrorMap.set(0x1770, MathOverflowError);
nameToErrorMap.set('MathOverflow', MathOverflowError);

/** UnsupportedOracle: Unsupported price oracle */
export class UnsupportedOracleError extends ProgramError {
  override readonly name: string = 'UnsupportedOracle';

  readonly code: number = 0x1771; // 6001

  constructor(program: Program, cause?: Error) {
    super('Unsupported price oracle', program, cause);
  }
}
codeToErrorMap.set(0x1771, UnsupportedOracleError);
nameToErrorMap.set('UnsupportedOracle', UnsupportedOracleError);

/** InvalidOracleAccount: Invalid oracle account */
export class InvalidOracleAccountError extends ProgramError {
  override readonly name: string = 'InvalidOracleAccount';

  readonly code: number = 0x1772; // 6002

  constructor(program: Program, cause?: Error) {
    super('Invalid oracle account', program, cause);
  }
}
codeToErrorMap.set(0x1772, InvalidOracleAccountError);
nameToErrorMap.set('InvalidOracleAccount', InvalidOracleAccountError);

/** StaleOraclePrice: Stale oracle price */
export class StaleOraclePriceError extends ProgramError {
  override readonly name: string = 'StaleOraclePrice';

  readonly code: number = 0x1773; // 6003

  constructor(program: Program, cause?: Error) {
    super('Stale oracle price', program, cause);
  }
}
codeToErrorMap.set(0x1773, StaleOraclePriceError);
nameToErrorMap.set('StaleOraclePrice', StaleOraclePriceError);

/** InvalidOraclePrice: Invalid oracle price */
export class InvalidOraclePriceError extends ProgramError {
  override readonly name: string = 'InvalidOraclePrice';

  readonly code: number = 0x1774; // 6004

  constructor(program: Program, cause?: Error) {
    super('Invalid oracle price', program, cause);
  }
}
codeToErrorMap.set(0x1774, InvalidOraclePriceError);
nameToErrorMap.set('InvalidOraclePrice', InvalidOraclePriceError);

/** InvalidEnvironment: Instruction is not allowed in production */
export class InvalidEnvironmentError extends ProgramError {
  override readonly name: string = 'InvalidEnvironment';

  readonly code: number = 0x1775; // 6005

  constructor(program: Program, cause?: Error) {
    super('Instruction is not allowed in production', program, cause);
  }
}
codeToErrorMap.set(0x1775, InvalidEnvironmentError);
nameToErrorMap.set('InvalidEnvironment', InvalidEnvironmentError);

/** InvalidCollateralAccount: Invalid collateral account */
export class InvalidCollateralAccountError extends ProgramError {
  override readonly name: string = 'InvalidCollateralAccount';

  readonly code: number = 0x1776; // 6006

  constructor(program: Program, cause?: Error) {
    super('Invalid collateral account', program, cause);
  }
}
codeToErrorMap.set(0x1776, InvalidCollateralAccountError);
nameToErrorMap.set('InvalidCollateralAccount', InvalidCollateralAccountError);

/** InvalidCollateralAmount: Invalid collateral amount */
export class InvalidCollateralAmountError extends ProgramError {
  override readonly name: string = 'InvalidCollateralAmount';

  readonly code: number = 0x1777; // 6007

  constructor(program: Program, cause?: Error) {
    super('Invalid collateral amount', program, cause);
  }
}
codeToErrorMap.set(0x1777, InvalidCollateralAmountError);
nameToErrorMap.set('InvalidCollateralAmount', InvalidCollateralAmountError);

/** CollateralSlippage: Collateral slippage */
export class CollateralSlippageError extends ProgramError {
  override readonly name: string = 'CollateralSlippage';

  readonly code: number = 0x1778; // 6008

  constructor(program: Program, cause?: Error) {
    super('Collateral slippage', program, cause);
  }
}
codeToErrorMap.set(0x1778, CollateralSlippageError);
nameToErrorMap.set('CollateralSlippage', CollateralSlippageError);

/** InvalidPositionState: Invalid position state */
export class InvalidPositionStateError extends ProgramError {
  override readonly name: string = 'InvalidPositionState';

  readonly code: number = 0x1779; // 6009

  constructor(program: Program, cause?: Error) {
    super('Invalid position state', program, cause);
  }
}
codeToErrorMap.set(0x1779, InvalidPositionStateError);
nameToErrorMap.set('InvalidPositionState', InvalidPositionStateError);

/** InvalidPerpetualsConfig: Invalid perpetuals config */
export class InvalidPerpetualsConfigError extends ProgramError {
  override readonly name: string = 'InvalidPerpetualsConfig';

  readonly code: number = 0x177a; // 6010

  constructor(program: Program, cause?: Error) {
    super('Invalid perpetuals config', program, cause);
  }
}
codeToErrorMap.set(0x177a, InvalidPerpetualsConfigError);
nameToErrorMap.set('InvalidPerpetualsConfig', InvalidPerpetualsConfigError);

/** InvalidPoolConfig: Invalid pool config */
export class InvalidPoolConfigError extends ProgramError {
  override readonly name: string = 'InvalidPoolConfig';

  readonly code: number = 0x177b; // 6011

  constructor(program: Program, cause?: Error) {
    super('Invalid pool config', program, cause);
  }
}
codeToErrorMap.set(0x177b, InvalidPoolConfigError);
nameToErrorMap.set('InvalidPoolConfig', InvalidPoolConfigError);

/** InvalidInstruction: Invalid instruction */
export class InvalidInstructionError extends ProgramError {
  override readonly name: string = 'InvalidInstruction';

  readonly code: number = 0x177c; // 6012

  constructor(program: Program, cause?: Error) {
    super('Invalid instruction', program, cause);
  }
}
codeToErrorMap.set(0x177c, InvalidInstructionError);
nameToErrorMap.set('InvalidInstruction', InvalidInstructionError);

/** InvalidCustodyConfig: Invalid custody config */
export class InvalidCustodyConfigError extends ProgramError {
  override readonly name: string = 'InvalidCustodyConfig';

  readonly code: number = 0x177d; // 6013

  constructor(program: Program, cause?: Error) {
    super('Invalid custody config', program, cause);
  }
}
codeToErrorMap.set(0x177d, InvalidCustodyConfigError);
nameToErrorMap.set('InvalidCustodyConfig', InvalidCustodyConfigError);

/** InvalidCustodyBalance: Invalid custody balance */
export class InvalidCustodyBalanceError extends ProgramError {
  override readonly name: string = 'InvalidCustodyBalance';

  readonly code: number = 0x177e; // 6014

  constructor(program: Program, cause?: Error) {
    super('Invalid custody balance', program, cause);
  }
}
codeToErrorMap.set(0x177e, InvalidCustodyBalanceError);
nameToErrorMap.set('InvalidCustodyBalance', InvalidCustodyBalanceError);

/** InvalidArgument: Invalid argument */
export class InvalidArgumentError extends ProgramError {
  override readonly name: string = 'InvalidArgument';

  readonly code: number = 0x177f; // 6015

  constructor(program: Program, cause?: Error) {
    super('Invalid argument', program, cause);
  }
}
codeToErrorMap.set(0x177f, InvalidArgumentError);
nameToErrorMap.set('InvalidArgument', InvalidArgumentError);

/** InvalidPositionRequest: Invalid position request */
export class InvalidPositionRequestError extends ProgramError {
  override readonly name: string = 'InvalidPositionRequest';

  readonly code: number = 0x1780; // 6016

  constructor(program: Program, cause?: Error) {
    super('Invalid position request', program, cause);
  }
}
codeToErrorMap.set(0x1780, InvalidPositionRequestError);
nameToErrorMap.set('InvalidPositionRequest', InvalidPositionRequestError);

/** InvalidPositionRequestInputAta: Invalid position request input ata */
export class InvalidPositionRequestInputAtaError extends ProgramError {
  override readonly name: string = 'InvalidPositionRequestInputAta';

  readonly code: number = 0x1781; // 6017

  constructor(program: Program, cause?: Error) {
    super('Invalid position request input ata', program, cause);
  }
}
codeToErrorMap.set(0x1781, InvalidPositionRequestInputAtaError);
nameToErrorMap.set(
  'InvalidPositionRequestInputAta',
  InvalidPositionRequestInputAtaError
);

/** InvalidMint: Invalid mint */
export class InvalidMintError extends ProgramError {
  override readonly name: string = 'InvalidMint';

  readonly code: number = 0x1782; // 6018

  constructor(program: Program, cause?: Error) {
    super('Invalid mint', program, cause);
  }
}
codeToErrorMap.set(0x1782, InvalidMintError);
nameToErrorMap.set('InvalidMint', InvalidMintError);

/** InsufficientTokenAmount: Insufficient token amount */
export class InsufficientTokenAmountError extends ProgramError {
  override readonly name: string = 'InsufficientTokenAmount';

  readonly code: number = 0x1783; // 6019

  constructor(program: Program, cause?: Error) {
    super('Insufficient token amount', program, cause);
  }
}
codeToErrorMap.set(0x1783, InsufficientTokenAmountError);
nameToErrorMap.set('InsufficientTokenAmount', InsufficientTokenAmountError);

/** InsufficientAmountReturned: Insufficient token amount returned */
export class InsufficientAmountReturnedError extends ProgramError {
  override readonly name: string = 'InsufficientAmountReturned';

  readonly code: number = 0x1784; // 6020

  constructor(program: Program, cause?: Error) {
    super('Insufficient token amount returned', program, cause);
  }
}
codeToErrorMap.set(0x1784, InsufficientAmountReturnedError);
nameToErrorMap.set(
  'InsufficientAmountReturned',
  InsufficientAmountReturnedError
);

/** MaxPriceSlippage: Price slippage limit exceeded */
export class MaxPriceSlippageError extends ProgramError {
  override readonly name: string = 'MaxPriceSlippage';

  readonly code: number = 0x1785; // 6021

  constructor(program: Program, cause?: Error) {
    super('Price slippage limit exceeded', program, cause);
  }
}
codeToErrorMap.set(0x1785, MaxPriceSlippageError);
nameToErrorMap.set('MaxPriceSlippage', MaxPriceSlippageError);

/** MaxLeverage: Position leverage limit exceeded */
export class MaxLeverageError extends ProgramError {
  override readonly name: string = 'MaxLeverage';

  readonly code: number = 0x1786; // 6022

  constructor(program: Program, cause?: Error) {
    super('Position leverage limit exceeded', program, cause);
  }
}
codeToErrorMap.set(0x1786, MaxLeverageError);
nameToErrorMap.set('MaxLeverage', MaxLeverageError);

/** CustodyAmountLimit: Custody amount limit exceeded */
export class CustodyAmountLimitError extends ProgramError {
  override readonly name: string = 'CustodyAmountLimit';

  readonly code: number = 0x1787; // 6023

  constructor(program: Program, cause?: Error) {
    super('Custody amount limit exceeded', program, cause);
  }
}
codeToErrorMap.set(0x1787, CustodyAmountLimitError);
nameToErrorMap.set('CustodyAmountLimit', CustodyAmountLimitError);

/** PoolAmountLimit: Pool amount limit exceeded */
export class PoolAmountLimitError extends ProgramError {
  override readonly name: string = 'PoolAmountLimit';

  readonly code: number = 0x1788; // 6024

  constructor(program: Program, cause?: Error) {
    super('Pool amount limit exceeded', program, cause);
  }
}
codeToErrorMap.set(0x1788, PoolAmountLimitError);
nameToErrorMap.set('PoolAmountLimit', PoolAmountLimitError);

/** PersonalPoolAmountLimit: Personal pool amount limit exceeded */
export class PersonalPoolAmountLimitError extends ProgramError {
  override readonly name: string = 'PersonalPoolAmountLimit';

  readonly code: number = 0x1789; // 6025

  constructor(program: Program, cause?: Error) {
    super('Personal pool amount limit exceeded', program, cause);
  }
}
codeToErrorMap.set(0x1789, PersonalPoolAmountLimitError);
nameToErrorMap.set('PersonalPoolAmountLimit', PersonalPoolAmountLimitError);

/** UnsupportedToken: Token is not supported */
export class UnsupportedTokenError extends ProgramError {
  override readonly name: string = 'UnsupportedToken';

  readonly code: number = 0x178a; // 6026

  constructor(program: Program, cause?: Error) {
    super('Token is not supported', program, cause);
  }
}
codeToErrorMap.set(0x178a, UnsupportedTokenError);
nameToErrorMap.set('UnsupportedToken', UnsupportedTokenError);

/** InstructionNotAllowed: Instruction is not allowed at this time */
export class InstructionNotAllowedError extends ProgramError {
  override readonly name: string = 'InstructionNotAllowed';

  readonly code: number = 0x178b; // 6027

  constructor(program: Program, cause?: Error) {
    super('Instruction is not allowed at this time', program, cause);
  }
}
codeToErrorMap.set(0x178b, InstructionNotAllowedError);
nameToErrorMap.set('InstructionNotAllowed', InstructionNotAllowedError);

/** JupiterProgramMismatch: Jupiter Program ID mismatch */
export class JupiterProgramMismatchError extends ProgramError {
  override readonly name: string = 'JupiterProgramMismatch';

  readonly code: number = 0x178c; // 6028

  constructor(program: Program, cause?: Error) {
    super('Jupiter Program ID mismatch', program, cause);
  }
}
codeToErrorMap.set(0x178c, JupiterProgramMismatchError);
nameToErrorMap.set('JupiterProgramMismatch', JupiterProgramMismatchError);

/** ProgramMismatch: Program ID mismatch */
export class ProgramMismatchError extends ProgramError {
  override readonly name: string = 'ProgramMismatch';

  readonly code: number = 0x178d; // 6029

  constructor(program: Program, cause?: Error) {
    super('Program ID mismatch', program, cause);
  }
}
codeToErrorMap.set(0x178d, ProgramMismatchError);
nameToErrorMap.set('ProgramMismatch', ProgramMismatchError);

/** AddressMismatch: Address mismatch */
export class AddressMismatchError extends ProgramError {
  override readonly name: string = 'AddressMismatch';

  readonly code: number = 0x178e; // 6030

  constructor(program: Program, cause?: Error) {
    super('Address mismatch', program, cause);
  }
}
codeToErrorMap.set(0x178e, AddressMismatchError);
nameToErrorMap.set('AddressMismatch', AddressMismatchError);

/** KeeperATAMissing: Missing keeper ATA */
export class KeeperATAMissingError extends ProgramError {
  override readonly name: string = 'KeeperATAMissing';

  readonly code: number = 0x178f; // 6031

  constructor(program: Program, cause?: Error) {
    super('Missing keeper ATA', program, cause);
  }
}
codeToErrorMap.set(0x178f, KeeperATAMissingError);
nameToErrorMap.set('KeeperATAMissing', KeeperATAMissingError);

/** SwapAmountMismatch: Swap amount mismatch */
export class SwapAmountMismatchError extends ProgramError {
  override readonly name: string = 'SwapAmountMismatch';

  readonly code: number = 0x1790; // 6032

  constructor(program: Program, cause?: Error) {
    super('Swap amount mismatch', program, cause);
  }
}
codeToErrorMap.set(0x1790, SwapAmountMismatchError);
nameToErrorMap.set('SwapAmountMismatch', SwapAmountMismatchError);

/** CPINotAllowed: CPI not allowed */
export class CPINotAllowedError extends ProgramError {
  override readonly name: string = 'CPINotAllowed';

  readonly code: number = 0x1791; // 6033

  constructor(program: Program, cause?: Error) {
    super('CPI not allowed', program, cause);
  }
}
codeToErrorMap.set(0x1791, CPINotAllowedError);
nameToErrorMap.set('CPINotAllowed', CPINotAllowedError);

/** InvalidKeeper: Invalid Keeper */
export class InvalidKeeperError extends ProgramError {
  override readonly name: string = 'InvalidKeeper';

  readonly code: number = 0x1792; // 6034

  constructor(program: Program, cause?: Error) {
    super('Invalid Keeper', program, cause);
  }
}
codeToErrorMap.set(0x1792, InvalidKeeperError);
nameToErrorMap.set('InvalidKeeper', InvalidKeeperError);

/** ExceedExecutionPeriod: Exceed execution period */
export class ExceedExecutionPeriodError extends ProgramError {
  override readonly name: string = 'ExceedExecutionPeriod';

  readonly code: number = 0x1793; // 6035

  constructor(program: Program, cause?: Error) {
    super('Exceed execution period', program, cause);
  }
}
codeToErrorMap.set(0x1793, ExceedExecutionPeriodError);
nameToErrorMap.set('ExceedExecutionPeriod', ExceedExecutionPeriodError);

/** InvalidRequestType: Invalid Request Type */
export class InvalidRequestTypeError extends ProgramError {
  override readonly name: string = 'InvalidRequestType';

  readonly code: number = 0x1794; // 6036

  constructor(program: Program, cause?: Error) {
    super('Invalid Request Type', program, cause);
  }
}
codeToErrorMap.set(0x1794, InvalidRequestTypeError);
nameToErrorMap.set('InvalidRequestType', InvalidRequestTypeError);

/** InvalidTriggerPrice: Invalid Trigger Price */
export class InvalidTriggerPriceError extends ProgramError {
  override readonly name: string = 'InvalidTriggerPrice';

  readonly code: number = 0x1795; // 6037

  constructor(program: Program, cause?: Error) {
    super('Invalid Trigger Price', program, cause);
  }
}
codeToErrorMap.set(0x1795, InvalidTriggerPriceError);
nameToErrorMap.set('InvalidTriggerPrice', InvalidTriggerPriceError);

/** TriggerPriceSlippage: Trigger Price Slippage */
export class TriggerPriceSlippageError extends ProgramError {
  override readonly name: string = 'TriggerPriceSlippage';

  readonly code: number = 0x1796; // 6038

  constructor(program: Program, cause?: Error) {
    super('Trigger Price Slippage', program, cause);
  }
}
codeToErrorMap.set(0x1796, TriggerPriceSlippageError);
nameToErrorMap.set('TriggerPriceSlippage', TriggerPriceSlippageError);

/** MissingTriggerPrice: Missing Trigger Price */
export class MissingTriggerPriceError extends ProgramError {
  override readonly name: string = 'MissingTriggerPrice';

  readonly code: number = 0x1797; // 6039

  constructor(program: Program, cause?: Error) {
    super('Missing Trigger Price', program, cause);
  }
}
codeToErrorMap.set(0x1797, MissingTriggerPriceError);
nameToErrorMap.set('MissingTriggerPrice', MissingTriggerPriceError);

/** MissingPriceSlippage: Missing Price Slippage */
export class MissingPriceSlippageError extends ProgramError {
  override readonly name: string = 'MissingPriceSlippage';

  readonly code: number = 0x1798; // 6040

  constructor(program: Program, cause?: Error) {
    super('Missing Price Slippage', program, cause);
  }
}
codeToErrorMap.set(0x1798, MissingPriceSlippageError);
nameToErrorMap.set('MissingPriceSlippage', MissingPriceSlippageError);

/** InvalidPriceCalcMode: Invalid Price Calc Mode */
export class InvalidPriceCalcModeError extends ProgramError {
  override readonly name: string = 'InvalidPriceCalcMode';

  readonly code: number = 0x1799; // 6041

  constructor(program: Program, cause?: Error) {
    super('Invalid Price Calc Mode', program, cause);
  }
}
codeToErrorMap.set(0x1799, InvalidPriceCalcModeError);
nameToErrorMap.set('InvalidPriceCalcMode', InvalidPriceCalcModeError);

/** RequestUpdatedTooRecent: Request Updated Too Recent */
export class RequestUpdatedTooRecentError extends ProgramError {
  override readonly name: string = 'RequestUpdatedTooRecent';

  readonly code: number = 0x179a; // 6042

  constructor(program: Program, cause?: Error) {
    super('Request Updated Too Recent', program, cause);
  }
}
codeToErrorMap.set(0x179a, RequestUpdatedTooRecentError);
nameToErrorMap.set('RequestUpdatedTooRecent', RequestUpdatedTooRecentError);

/** ExceedTokenWeightage: Exceed Token Weightage */
export class ExceedTokenWeightageError extends ProgramError {
  override readonly name: string = 'ExceedTokenWeightage';

  readonly code: number = 0x179b; // 6043

  constructor(program: Program, cause?: Error) {
    super('Exceed Token Weightage', program, cause);
  }
}
codeToErrorMap.set(0x179b, ExceedTokenWeightageError);
nameToErrorMap.set('ExceedTokenWeightage', ExceedTokenWeightageError);

/** OraclePublishTimeTooEarly: Oracle Publish Time Too Early */
export class OraclePublishTimeTooEarlyError extends ProgramError {
  override readonly name: string = 'OraclePublishTimeTooEarly';

  readonly code: number = 0x179c; // 6044

  constructor(program: Program, cause?: Error) {
    super('Oracle Publish Time Too Early', program, cause);
  }
}
codeToErrorMap.set(0x179c, OraclePublishTimeTooEarlyError);
nameToErrorMap.set('OraclePublishTimeTooEarly', OraclePublishTimeTooEarlyError);

/** PullOraclePublishTimeTooEarly: Pull Oracle Publish Time Too Early */
export class PullOraclePublishTimeTooEarlyError extends ProgramError {
  override readonly name: string = 'PullOraclePublishTimeTooEarly';

  readonly code: number = 0x179d; // 6045

  constructor(program: Program, cause?: Error) {
    super('Pull Oracle Publish Time Too Early', program, cause);
  }
}
codeToErrorMap.set(0x179d, PullOraclePublishTimeTooEarlyError);
nameToErrorMap.set(
  'PullOraclePublishTimeTooEarly',
  PullOraclePublishTimeTooEarlyError
);

/** StalePullOraclePrice: Stale Pull Oracle Price */
export class StalePullOraclePriceError extends ProgramError {
  override readonly name: string = 'StalePullOraclePrice';

  readonly code: number = 0x179e; // 6046

  constructor(program: Program, cause?: Error) {
    super('Stale Pull Oracle Price', program, cause);
  }
}
codeToErrorMap.set(0x179e, StalePullOraclePriceError);
nameToErrorMap.set('StalePullOraclePrice', StalePullOraclePriceError);

/** InvalidPullOraclePrice: Invalid Pull Oracle Price */
export class InvalidPullOraclePriceError extends ProgramError {
  override readonly name: string = 'InvalidPullOraclePrice';

  readonly code: number = 0x179f; // 6047

  constructor(program: Program, cause?: Error) {
    super('Invalid Pull Oracle Price', program, cause);
  }
}
codeToErrorMap.set(0x179f, InvalidPullOraclePriceError);
nameToErrorMap.set('InvalidPullOraclePrice', InvalidPullOraclePriceError);

/** PullOracleNotVerified: Pull Oracle Not Verified */
export class PullOracleNotVerifiedError extends ProgramError {
  override readonly name: string = 'PullOracleNotVerified';

  readonly code: number = 0x17a0; // 6048

  constructor(program: Program, cause?: Error) {
    super('Pull Oracle Not Verified', program, cause);
  }
}
codeToErrorMap.set(0x17a0, PullOracleNotVerifiedError);
nameToErrorMap.set('PullOracleNotVerified', PullOracleNotVerifiedError);

/** PriceDiffTooLarge: Price Diff Between Pull and Push Oracle is Too Large */
export class PriceDiffTooLargeError extends ProgramError {
  override readonly name: string = 'PriceDiffTooLarge';

  readonly code: number = 0x17a1; // 6049

  constructor(program: Program, cause?: Error) {
    super(
      'Price Diff Between Pull and Push Oracle is Too Large',
      program,
      cause
    );
  }
}
codeToErrorMap.set(0x17a1, PriceDiffTooLargeError);
nameToErrorMap.set('PriceDiffTooLarge', PriceDiffTooLargeError);

/** InvalidDovesOraclePrice: Invalid Doves Oracle Price */
export class InvalidDovesOraclePriceError extends ProgramError {
  override readonly name: string = 'InvalidDovesOraclePrice';

  readonly code: number = 0x17a2; // 6050

  constructor(program: Program, cause?: Error) {
    super('Invalid Doves Oracle Price', program, cause);
  }
}
codeToErrorMap.set(0x17a2, InvalidDovesOraclePriceError);
nameToErrorMap.set('InvalidDovesOraclePrice', InvalidDovesOraclePriceError);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function getPerpetualsErrorFromCode(
  code: number,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = codeToErrorMap.get(code);
  return constructor ? new constructor(program, cause) : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function getPerpetualsErrorFromName(
  name: string,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = nameToErrorMap.get(name);
  return constructor ? new constructor(program, cause) : null;
}
