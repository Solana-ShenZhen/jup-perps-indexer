/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bytes,
  i64,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  Permissions,
  PermissionsArgs,
  getPermissionsSerializer,
} from '../types';

export type Perpetuals = Account<PerpetualsAccountData>;

export type PerpetualsAccountData = {
  discriminator: Uint8Array;
  permissions: Permissions;
  pools: Array<PublicKey>;
  admin: PublicKey;
  transferAuthorityBump: number;
  perpetualsBump: number;
  inceptionTime: bigint;
};

export type PerpetualsAccountDataArgs = {
  permissions: PermissionsArgs;
  pools: Array<PublicKey>;
  admin: PublicKey;
  transferAuthorityBump: number;
  perpetualsBump: number;
  inceptionTime: number | bigint;
};

export function getPerpetualsAccountDataSerializer(): Serializer<
  PerpetualsAccountDataArgs,
  PerpetualsAccountData
> {
  return mapSerializer<PerpetualsAccountDataArgs, any, PerpetualsAccountData>(
    struct<PerpetualsAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['permissions', getPermissionsSerializer()],
        ['pools', array(publicKeySerializer())],
        ['admin', publicKeySerializer()],
        ['transferAuthorityBump', u8()],
        ['perpetualsBump', u8()],
        ['inceptionTime', i64()],
      ],
      { description: 'PerpetualsAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([28, 167, 98, 191, 104, 82, 108, 196]),
    })
  ) as Serializer<PerpetualsAccountDataArgs, PerpetualsAccountData>;
}

export function deserializePerpetuals(rawAccount: RpcAccount): Perpetuals {
  return deserializeAccount(rawAccount, getPerpetualsAccountDataSerializer());
}

export async function fetchPerpetuals(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Perpetuals> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Perpetuals');
  return deserializePerpetuals(maybeAccount);
}

export async function safeFetchPerpetuals(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Perpetuals | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializePerpetuals(maybeAccount) : null;
}

export async function fetchAllPerpetuals(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Perpetuals[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Perpetuals');
    return deserializePerpetuals(maybeAccount);
  });
}

export async function safeFetchAllPerpetuals(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Perpetuals[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializePerpetuals(maybeAccount as RpcAccount));
}

export function getPerpetualsGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey('perpetuals', '');
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      permissions: PermissionsArgs;
      pools: Array<PublicKey>;
      admin: PublicKey;
      transferAuthorityBump: number;
      perpetualsBump: number;
      inceptionTime: number | bigint;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      permissions: [8, getPermissionsSerializer()],
      pools: [15, array(publicKeySerializer())],
      admin: [null, publicKeySerializer()],
      transferAuthorityBump: [null, u8()],
      perpetualsBump: [null, u8()],
      inceptionTime: [null, i64()],
    })
    .deserializeUsing<Perpetuals>((account) => deserializePerpetuals(account))
    .whereField(
      'discriminator',
      new Uint8Array([28, 167, 98, 191, 104, 82, 108, 196])
    );
}
