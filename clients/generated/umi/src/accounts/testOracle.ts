/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  i32,
  i64,
  mapSerializer,
  struct,
  u64,
} from '@metaplex-foundation/umi/serializers';

export type TestOracle = Account<TestOracleAccountData>;

export type TestOracleAccountData = {
  discriminator: Uint8Array;
  price: bigint;
  expo: number;
  conf: bigint;
  publishTime: bigint;
};

export type TestOracleAccountDataArgs = {
  price: number | bigint;
  expo: number;
  conf: number | bigint;
  publishTime: number | bigint;
};

export function getTestOracleAccountDataSerializer(): Serializer<
  TestOracleAccountDataArgs,
  TestOracleAccountData
> {
  return mapSerializer<TestOracleAccountDataArgs, any, TestOracleAccountData>(
    struct<TestOracleAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['price', u64()],
        ['expo', i32()],
        ['conf', u64()],
        ['publishTime', i64()],
      ],
      { description: 'TestOracleAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([198, 49, 63, 134, 232, 251, 168, 28]),
    })
  ) as Serializer<TestOracleAccountDataArgs, TestOracleAccountData>;
}

export function deserializeTestOracle(rawAccount: RpcAccount): TestOracle {
  return deserializeAccount(rawAccount, getTestOracleAccountDataSerializer());
}

export async function fetchTestOracle(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<TestOracle> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'TestOracle');
  return deserializeTestOracle(maybeAccount);
}

export async function safeFetchTestOracle(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<TestOracle | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeTestOracle(maybeAccount) : null;
}

export async function fetchAllTestOracle(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<TestOracle[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'TestOracle');
    return deserializeTestOracle(maybeAccount);
  });
}

export async function safeFetchAllTestOracle(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<TestOracle[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeTestOracle(maybeAccount as RpcAccount));
}

export function getTestOracleGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey('perpetuals', '');
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      price: number | bigint;
      expo: number;
      conf: number | bigint;
      publishTime: number | bigint;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      price: [8, u64()],
      expo: [16, i32()],
      conf: [20, u64()],
      publishTime: [28, i64()],
    })
    .deserializeUsing<TestOracle>((account) => deserializeTestOracle(account))
    .whereField(
      'discriminator',
      new Uint8Array([198, 49, 63, 134, 232, 251, 168, 28])
    );
}
