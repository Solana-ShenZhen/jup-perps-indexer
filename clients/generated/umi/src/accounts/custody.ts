/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bool,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  Assets,
  AssetsArgs,
  FundingRateState,
  FundingRateStateArgs,
  OracleParams,
  OracleParamsArgs,
  Permissions,
  PermissionsArgs,
  PricingParams,
  PricingParamsArgs,
  getAssetsSerializer,
  getFundingRateStateSerializer,
  getOracleParamsSerializer,
  getPermissionsSerializer,
  getPricingParamsSerializer,
} from '../types';

export type Custody = Account<CustodyAccountData>;

export type CustodyAccountData = {
  discriminator: Uint8Array;
  pool: PublicKey;
  mint: PublicKey;
  tokenAccount: PublicKey;
  decimals: number;
  isStable: boolean;
  oracle: OracleParams;
  pricing: PricingParams;
  permissions: Permissions;
  targetRatioBps: bigint;
  assets: Assets;
  fundingRateState: FundingRateState;
  bump: number;
  tokenAccountBump: number;
};

export type CustodyAccountDataArgs = {
  pool: PublicKey;
  mint: PublicKey;
  tokenAccount: PublicKey;
  decimals: number;
  isStable: boolean;
  oracle: OracleParamsArgs;
  pricing: PricingParamsArgs;
  permissions: PermissionsArgs;
  targetRatioBps: number | bigint;
  assets: AssetsArgs;
  fundingRateState: FundingRateStateArgs;
  bump: number;
  tokenAccountBump: number;
};

export function getCustodyAccountDataSerializer(): Serializer<
  CustodyAccountDataArgs,
  CustodyAccountData
> {
  return mapSerializer<CustodyAccountDataArgs, any, CustodyAccountData>(
    struct<CustodyAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['pool', publicKeySerializer()],
        ['mint', publicKeySerializer()],
        ['tokenAccount', publicKeySerializer()],
        ['decimals', u8()],
        ['isStable', bool()],
        ['oracle', getOracleParamsSerializer()],
        ['pricing', getPricingParamsSerializer()],
        ['permissions', getPermissionsSerializer()],
        ['targetRatioBps', u64()],
        ['assets', getAssetsSerializer()],
        ['fundingRateState', getFundingRateStateSerializer()],
        ['bump', u8()],
        ['tokenAccountBump', u8()],
      ],
      { description: 'CustodyAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([1, 184, 48, 81, 93, 131, 63, 145]),
    })
  ) as Serializer<CustodyAccountDataArgs, CustodyAccountData>;
}

export function deserializeCustody(rawAccount: RpcAccount): Custody {
  return deserializeAccount(rawAccount, getCustodyAccountDataSerializer());
}

export async function fetchCustody(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Custody> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Custody');
  return deserializeCustody(maybeAccount);
}

export async function safeFetchCustody(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Custody | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeCustody(maybeAccount) : null;
}

export async function fetchAllCustody(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Custody[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Custody');
    return deserializeCustody(maybeAccount);
  });
}

export async function safeFetchAllCustody(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Custody[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeCustody(maybeAccount as RpcAccount));
}

export function getCustodyGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey('perpetuals', '');
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      pool: PublicKey;
      mint: PublicKey;
      tokenAccount: PublicKey;
      decimals: number;
      isStable: boolean;
      oracle: OracleParamsArgs;
      pricing: PricingParamsArgs;
      permissions: PermissionsArgs;
      targetRatioBps: number | bigint;
      assets: AssetsArgs;
      fundingRateState: FundingRateStateArgs;
      bump: number;
      tokenAccountBump: number;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      pool: [8, publicKeySerializer()],
      mint: [40, publicKeySerializer()],
      tokenAccount: [72, publicKeySerializer()],
      decimals: [104, u8()],
      isStable: [105, bool()],
      oracle: [106, getOracleParamsSerializer()],
      pricing: [151, getPricingParamsSerializer()],
      permissions: [199, getPermissionsSerializer()],
      targetRatioBps: [206, u64()],
      assets: [214, getAssetsSerializer()],
      fundingRateState: [262, getFundingRateStateSerializer()],
      bump: [294, u8()],
      tokenAccountBump: [295, u8()],
    })
    .deserializeUsing<Custody>((account) => deserializeCustody(account))
    .whereField(
      'discriminator',
      new Uint8Array([1, 184, 48, 81, 93, 131, 63, 145])
    );
}
