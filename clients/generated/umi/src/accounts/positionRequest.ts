/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Account,
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bool,
  bytes,
  i64,
  mapSerializer,
  option,
  publicKey as publicKeySerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  RequestChange,
  RequestChangeArgs,
  RequestType,
  RequestTypeArgs,
  Side,
  SideArgs,
  getRequestChangeSerializer,
  getRequestTypeSerializer,
  getSideSerializer,
} from '../types';

export type PositionRequest = Account<PositionRequestAccountData>;

export type PositionRequestAccountData = {
  discriminator: Uint8Array;
  owner: PublicKey;
  pool: PublicKey;
  custody: PublicKey;
  position: PublicKey;
  mint: PublicKey;
  openTime: bigint;
  updateTime: bigint;
  sizeUsdDelta: bigint;
  collateralDelta: bigint;
  requestChange: RequestChange;
  requestType: RequestType;
  side: Side;
  priceSlippage: Option<bigint>;
  jupiterMinimumOut: Option<bigint>;
  preSwapAmount: Option<bigint>;
  triggerPrice: Option<bigint>;
  triggerAboveThreshold: Option<boolean>;
  entirePosition: Option<boolean>;
  executed: boolean;
  counter: bigint;
  bump: number;
  referral: Option<PublicKey>;
};

export type PositionRequestAccountDataArgs = {
  owner: PublicKey;
  pool: PublicKey;
  custody: PublicKey;
  position: PublicKey;
  mint: PublicKey;
  openTime: number | bigint;
  updateTime: number | bigint;
  sizeUsdDelta: number | bigint;
  collateralDelta: number | bigint;
  requestChange: RequestChangeArgs;
  requestType: RequestTypeArgs;
  side: SideArgs;
  priceSlippage: OptionOrNullable<number | bigint>;
  jupiterMinimumOut: OptionOrNullable<number | bigint>;
  preSwapAmount: OptionOrNullable<number | bigint>;
  triggerPrice: OptionOrNullable<number | bigint>;
  triggerAboveThreshold: OptionOrNullable<boolean>;
  entirePosition: OptionOrNullable<boolean>;
  executed: boolean;
  counter: number | bigint;
  bump: number;
  referral: OptionOrNullable<PublicKey>;
};

export function getPositionRequestAccountDataSerializer(): Serializer<
  PositionRequestAccountDataArgs,
  PositionRequestAccountData
> {
  return mapSerializer<
    PositionRequestAccountDataArgs,
    any,
    PositionRequestAccountData
  >(
    struct<PositionRequestAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['owner', publicKeySerializer()],
        ['pool', publicKeySerializer()],
        ['custody', publicKeySerializer()],
        ['position', publicKeySerializer()],
        ['mint', publicKeySerializer()],
        ['openTime', i64()],
        ['updateTime', i64()],
        ['sizeUsdDelta', u64()],
        ['collateralDelta', u64()],
        ['requestChange', getRequestChangeSerializer()],
        ['requestType', getRequestTypeSerializer()],
        ['side', getSideSerializer()],
        ['priceSlippage', option(u64())],
        ['jupiterMinimumOut', option(u64())],
        ['preSwapAmount', option(u64())],
        ['triggerPrice', option(u64())],
        ['triggerAboveThreshold', option(bool())],
        ['entirePosition', option(bool())],
        ['executed', bool()],
        ['counter', u64()],
        ['bump', u8()],
        ['referral', option(publicKeySerializer())],
      ],
      { description: 'PositionRequestAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([12, 38, 250, 199, 46, 154, 32, 216]),
    })
  ) as Serializer<PositionRequestAccountDataArgs, PositionRequestAccountData>;
}

export function deserializePositionRequest(
  rawAccount: RpcAccount
): PositionRequest {
  return deserializeAccount(
    rawAccount,
    getPositionRequestAccountDataSerializer()
  );
}

export async function fetchPositionRequest(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<PositionRequest> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'PositionRequest');
  return deserializePositionRequest(maybeAccount);
}

export async function safeFetchPositionRequest(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<PositionRequest | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializePositionRequest(maybeAccount) : null;
}

export async function fetchAllPositionRequest(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<PositionRequest[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'PositionRequest');
    return deserializePositionRequest(maybeAccount);
  });
}

export async function safeFetchAllPositionRequest(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<PositionRequest[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializePositionRequest(maybeAccount as RpcAccount)
    );
}

export function getPositionRequestGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey('perpetuals', '');
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      owner: PublicKey;
      pool: PublicKey;
      custody: PublicKey;
      position: PublicKey;
      mint: PublicKey;
      openTime: number | bigint;
      updateTime: number | bigint;
      sizeUsdDelta: number | bigint;
      collateralDelta: number | bigint;
      requestChange: RequestChangeArgs;
      requestType: RequestTypeArgs;
      side: SideArgs;
      priceSlippage: OptionOrNullable<number | bigint>;
      jupiterMinimumOut: OptionOrNullable<number | bigint>;
      preSwapAmount: OptionOrNullable<number | bigint>;
      triggerPrice: OptionOrNullable<number | bigint>;
      triggerAboveThreshold: OptionOrNullable<boolean>;
      entirePosition: OptionOrNullable<boolean>;
      executed: boolean;
      counter: number | bigint;
      bump: number;
      referral: OptionOrNullable<PublicKey>;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      owner: [8, publicKeySerializer()],
      pool: [40, publicKeySerializer()],
      custody: [72, publicKeySerializer()],
      position: [104, publicKeySerializer()],
      mint: [136, publicKeySerializer()],
      openTime: [168, i64()],
      updateTime: [176, i64()],
      sizeUsdDelta: [184, u64()],
      collateralDelta: [192, u64()],
      requestChange: [200, getRequestChangeSerializer()],
      requestType: [201, getRequestTypeSerializer()],
      side: [202, getSideSerializer()],
      priceSlippage: [203, option(u64())],
      jupiterMinimumOut: [null, option(u64())],
      preSwapAmount: [null, option(u64())],
      triggerPrice: [null, option(u64())],
      triggerAboveThreshold: [null, option(bool())],
      entirePosition: [null, option(bool())],
      executed: [null, bool()],
      counter: [null, u64()],
      bump: [null, u8()],
      referral: [null, option(publicKeySerializer())],
    })
    .deserializeUsing<PositionRequest>((account) =>
      deserializePositionRequest(account)
    )
    .whereField(
      'discriminator',
      new Uint8Array([12, 38, 250, 199, 46, 154, 32, 216])
    );
}
