/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bytes,
  i64,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u128,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  Fees,
  FeesArgs,
  Limit,
  LimitArgs,
  PoolApr,
  PoolAprArgs,
  getFeesSerializer,
  getLimitSerializer,
  getPoolAprSerializer,
} from '../types';

export type Pool = Account<PoolAccountData>;

export type PoolAccountData = {
  discriminator: Uint8Array;
  name: string;
  custodies: Array<PublicKey>;
  aumUsd: bigint;
  limit: Limit;
  fees: Fees;
  poolApr: PoolApr;
  maxRequestExecutionSec: bigint;
  bump: number;
  lpTokenBump: number;
  inceptionTime: bigint;
};

export type PoolAccountDataArgs = {
  name: string;
  custodies: Array<PublicKey>;
  aumUsd: number | bigint;
  limit: LimitArgs;
  fees: FeesArgs;
  poolApr: PoolAprArgs;
  maxRequestExecutionSec: number | bigint;
  bump: number;
  lpTokenBump: number;
  inceptionTime: number | bigint;
};

export function getPoolAccountDataSerializer(): Serializer<
  PoolAccountDataArgs,
  PoolAccountData
> {
  return mapSerializer<PoolAccountDataArgs, any, PoolAccountData>(
    struct<PoolAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['name', string()],
        ['custodies', array(publicKeySerializer())],
        ['aumUsd', u128()],
        ['limit', getLimitSerializer()],
        ['fees', getFeesSerializer()],
        ['poolApr', getPoolAprSerializer()],
        ['maxRequestExecutionSec', i64()],
        ['bump', u8()],
        ['lpTokenBump', u8()],
        ['inceptionTime', i64()],
      ],
      { description: 'PoolAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([241, 154, 109, 4, 17, 177, 109, 188]),
    })
  ) as Serializer<PoolAccountDataArgs, PoolAccountData>;
}

export function deserializePool(rawAccount: RpcAccount): Pool {
  return deserializeAccount(rawAccount, getPoolAccountDataSerializer());
}

export async function fetchPool(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Pool> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Pool');
  return deserializePool(maybeAccount);
}

export async function safeFetchPool(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Pool | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializePool(maybeAccount) : null;
}

export async function fetchAllPool(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Pool[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Pool');
    return deserializePool(maybeAccount);
  });
}

export async function safeFetchAllPool(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Pool[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializePool(maybeAccount as RpcAccount));
}

export function getPoolGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>) {
  const programId = context.programs.getPublicKey('perpetuals', '');
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      name: string;
      custodies: Array<PublicKey>;
      aumUsd: number | bigint;
      limit: LimitArgs;
      fees: FeesArgs;
      poolApr: PoolAprArgs;
      maxRequestExecutionSec: number | bigint;
      bump: number;
      lpTokenBump: number;
      inceptionTime: number | bigint;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      name: [8, string()],
      custodies: [null, array(publicKeySerializer())],
      aumUsd: [null, u128()],
      limit: [null, getLimitSerializer()],
      fees: [null, getFeesSerializer()],
      poolApr: [null, getPoolAprSerializer()],
      maxRequestExecutionSec: [null, i64()],
      bump: [null, u8()],
      lpTokenBump: [null, u8()],
      inceptionTime: [null, i64()],
    })
    .deserializeUsing<Pool>((account) => deserializePool(account))
    .whereField(
      'discriminator',
      new Uint8Array([241, 154, 109, 4, 17, 177, 109, 188])
    );
}
