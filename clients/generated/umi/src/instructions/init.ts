/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';
import { InitParams, InitParamsArgs, getInitParamsSerializer } from '../types';

// Accounts.
export type InitInstructionAccounts = {
  upgradeAuthority: Signer;
  admin: PublicKey | Pda;
  transferAuthority: PublicKey | Pda;
  perpetuals: PublicKey | Pda;
  perpetualsProgram: PublicKey | Pda;
  perpetualsProgramData: PublicKey | Pda;
  systemProgram: PublicKey | Pda;
  tokenProgram: PublicKey | Pda;
};

// Data.
export type InitInstructionData = {
  discriminator: Uint8Array;
  params: InitParams;
};

export type InitInstructionDataArgs = { params: InitParamsArgs };

export function getInitInstructionDataSerializer(): Serializer<
  InitInstructionDataArgs,
  InitInstructionData
> {
  return mapSerializer<InitInstructionDataArgs, any, InitInstructionData>(
    struct<InitInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['params', getInitParamsSerializer()],
      ],
      { description: 'InitInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([220, 59, 207, 236, 108, 250, 47, 100]),
    })
  ) as Serializer<InitInstructionDataArgs, InitInstructionData>;
}

// Args.
export type InitInstructionArgs = InitInstructionDataArgs;

// Instruction.
export function init(
  context: Pick<Context, 'programs'>,
  input: InitInstructionAccounts & InitInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey('perpetuals', '');

  // Accounts.
  const resolvedAccounts = {
    upgradeAuthority: {
      index: 0,
      isWritable: true as boolean,
      value: input.upgradeAuthority ?? null,
    },
    admin: {
      index: 1,
      isWritable: false as boolean,
      value: input.admin ?? null,
    },
    transferAuthority: {
      index: 2,
      isWritable: true as boolean,
      value: input.transferAuthority ?? null,
    },
    perpetuals: {
      index: 3,
      isWritable: true as boolean,
      value: input.perpetuals ?? null,
    },
    perpetualsProgram: {
      index: 4,
      isWritable: false as boolean,
      value: input.perpetualsProgram ?? null,
    },
    perpetualsProgramData: {
      index: 5,
      isWritable: false as boolean,
      value: input.perpetualsProgramData ?? null,
    },
    systemProgram: {
      index: 6,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
    tokenProgram: {
      index: 7,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: InitInstructionArgs = { ...input };

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getInitInstructionDataSerializer().serialize(
    resolvedArgs as InitInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
