/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';
import {
  WithdrawFeesParams,
  WithdrawFeesParamsArgs,
  getWithdrawFeesParamsSerializer,
} from '../types';

// Accounts.
export type WithdrawFeesInstructionAccounts = {
  keeper: Signer;
  transferAuthority: PublicKey | Pda;
  perpetuals: PublicKey | Pda;
  pool: PublicKey | Pda;
  custody: PublicKey | Pda;
  custodyTokenAccount: PublicKey | Pda;
  custodyOracleAccount: PublicKey | Pda;
  receivingTokenAccount: PublicKey | Pda;
  tokenProgram: PublicKey | Pda;
};

// Data.
export type WithdrawFeesInstructionData = {
  discriminator: Uint8Array;
  params: WithdrawFeesParams;
};

export type WithdrawFeesInstructionDataArgs = {
  params: WithdrawFeesParamsArgs;
};

export function getWithdrawFeesInstructionDataSerializer(): Serializer<
  WithdrawFeesInstructionDataArgs,
  WithdrawFeesInstructionData
> {
  return mapSerializer<
    WithdrawFeesInstructionDataArgs,
    any,
    WithdrawFeesInstructionData
  >(
    struct<WithdrawFeesInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['params', getWithdrawFeesParamsSerializer()],
      ],
      { description: 'WithdrawFeesInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([198, 212, 171, 109, 144, 215, 174, 89]),
    })
  ) as Serializer<WithdrawFeesInstructionDataArgs, WithdrawFeesInstructionData>;
}

// Args.
export type WithdrawFeesInstructionArgs = WithdrawFeesInstructionDataArgs;

// Instruction.
export function withdrawFees(
  context: Pick<Context, 'programs'>,
  input: WithdrawFeesInstructionAccounts & WithdrawFeesInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey('perpetuals', '');

  // Accounts.
  const resolvedAccounts = {
    keeper: {
      index: 0,
      isWritable: false as boolean,
      value: input.keeper ?? null,
    },
    transferAuthority: {
      index: 1,
      isWritable: false as boolean,
      value: input.transferAuthority ?? null,
    },
    perpetuals: {
      index: 2,
      isWritable: false as boolean,
      value: input.perpetuals ?? null,
    },
    pool: { index: 3, isWritable: true as boolean, value: input.pool ?? null },
    custody: {
      index: 4,
      isWritable: true as boolean,
      value: input.custody ?? null,
    },
    custodyTokenAccount: {
      index: 5,
      isWritable: true as boolean,
      value: input.custodyTokenAccount ?? null,
    },
    custodyOracleAccount: {
      index: 6,
      isWritable: false as boolean,
      value: input.custodyOracleAccount ?? null,
    },
    receivingTokenAccount: {
      index: 7,
      isWritable: true as boolean,
      value: input.receivingTokenAccount ?? null,
    },
    tokenProgram: {
      index: 8,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: WithdrawFeesInstructionArgs = { ...input };

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getWithdrawFeesInstructionDataSerializer().serialize(
    resolvedArgs as WithdrawFeesInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
