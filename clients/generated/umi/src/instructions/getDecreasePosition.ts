/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';
import {
  GetDecreasePositionParams,
  GetDecreasePositionParamsArgs,
  getGetDecreasePositionParamsSerializer,
} from '../types';

// Accounts.
export type GetDecreasePositionInstructionAccounts = {
  perpetuals: PublicKey | Pda;
  pool: PublicKey | Pda;
  position: PublicKey | Pda;
  custody: PublicKey | Pda;
  custodyOracleAccount: PublicKey | Pda;
  collateralCustody: PublicKey | Pda;
  collateralCustodyOracleAccount: PublicKey | Pda;
  custodyPriceUpdate?: PublicKey | Pda;
  collateralCustodyPriceUpdate?: PublicKey | Pda;
};

// Data.
export type GetDecreasePositionInstructionData = {
  discriminator: Uint8Array;
  params: GetDecreasePositionParams;
};

export type GetDecreasePositionInstructionDataArgs = {
  params: GetDecreasePositionParamsArgs;
};

export function getGetDecreasePositionInstructionDataSerializer(): Serializer<
  GetDecreasePositionInstructionDataArgs,
  GetDecreasePositionInstructionData
> {
  return mapSerializer<
    GetDecreasePositionInstructionDataArgs,
    any,
    GetDecreasePositionInstructionData
  >(
    struct<GetDecreasePositionInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['params', getGetDecreasePositionParamsSerializer()],
      ],
      { description: 'GetDecreasePositionInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([106, 31, 146, 195, 103, 108, 48, 250]),
    })
  ) as Serializer<
    GetDecreasePositionInstructionDataArgs,
    GetDecreasePositionInstructionData
  >;
}

// Args.
export type GetDecreasePositionInstructionArgs =
  GetDecreasePositionInstructionDataArgs;

// Instruction.
export function getDecreasePosition(
  context: Pick<Context, 'programs'>,
  input: GetDecreasePositionInstructionAccounts &
    GetDecreasePositionInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey('perpetuals', '');

  // Accounts.
  const resolvedAccounts = {
    perpetuals: {
      index: 0,
      isWritable: false as boolean,
      value: input.perpetuals ?? null,
    },
    pool: { index: 1, isWritable: false as boolean, value: input.pool ?? null },
    position: {
      index: 2,
      isWritable: false as boolean,
      value: input.position ?? null,
    },
    custody: {
      index: 3,
      isWritable: false as boolean,
      value: input.custody ?? null,
    },
    custodyOracleAccount: {
      index: 4,
      isWritable: false as boolean,
      value: input.custodyOracleAccount ?? null,
    },
    collateralCustody: {
      index: 5,
      isWritable: false as boolean,
      value: input.collateralCustody ?? null,
    },
    collateralCustodyOracleAccount: {
      index: 6,
      isWritable: false as boolean,
      value: input.collateralCustodyOracleAccount ?? null,
    },
    custodyPriceUpdate: {
      index: 7,
      isWritable: false as boolean,
      value: input.custodyPriceUpdate ?? null,
    },
    collateralCustodyPriceUpdate: {
      index: 8,
      isWritable: false as boolean,
      value: input.collateralCustodyPriceUpdate ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: GetDecreasePositionInstructionArgs = { ...input };

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getGetDecreasePositionInstructionDataSerializer().serialize(
    resolvedArgs as GetDecreasePositionInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
