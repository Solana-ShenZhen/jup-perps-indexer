/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';
import {
  Swap2Params,
  Swap2ParamsArgs,
  getSwap2ParamsSerializer,
} from '../types';

// Accounts.
export type Swap2InstructionAccounts = {
  owner: Signer;
  fundingAccount: PublicKey | Pda;
  receivingAccount: PublicKey | Pda;
  transferAuthority: PublicKey | Pda;
  perpetuals: PublicKey | Pda;
  pool: PublicKey | Pda;
  receivingCustody: PublicKey | Pda;
  receivingCustodyDovesPriceAccount: PublicKey | Pda;
  receivingCustodyPythnetPriceAccount: PublicKey | Pda;
  receivingCustodyTokenAccount: PublicKey | Pda;
  dispensingCustody: PublicKey | Pda;
  dispensingCustodyDovesPriceAccount: PublicKey | Pda;
  dispensingCustodyPythnetPriceAccount: PublicKey | Pda;
  dispensingCustodyTokenAccount: PublicKey | Pda;
  tokenProgram: PublicKey | Pda;
  eventAuthority: PublicKey | Pda;
  program: PublicKey | Pda;
};

// Data.
export type Swap2InstructionData = {
  discriminator: Uint8Array;
  params: Swap2Params;
};

export type Swap2InstructionDataArgs = { params: Swap2ParamsArgs };

export function getSwap2InstructionDataSerializer(): Serializer<
  Swap2InstructionDataArgs,
  Swap2InstructionData
> {
  return mapSerializer<Swap2InstructionDataArgs, any, Swap2InstructionData>(
    struct<Swap2InstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['params', getSwap2ParamsSerializer()],
      ],
      { description: 'Swap2InstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([65, 75, 63, 76, 235, 91, 91, 136]),
    })
  ) as Serializer<Swap2InstructionDataArgs, Swap2InstructionData>;
}

// Args.
export type Swap2InstructionArgs = Swap2InstructionDataArgs;

// Instruction.
export function swap2(
  context: Pick<Context, 'programs'>,
  input: Swap2InstructionAccounts & Swap2InstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey('perpetuals', '');

  // Accounts.
  const resolvedAccounts = {
    owner: {
      index: 0,
      isWritable: false as boolean,
      value: input.owner ?? null,
    },
    fundingAccount: {
      index: 1,
      isWritable: true as boolean,
      value: input.fundingAccount ?? null,
    },
    receivingAccount: {
      index: 2,
      isWritable: true as boolean,
      value: input.receivingAccount ?? null,
    },
    transferAuthority: {
      index: 3,
      isWritable: false as boolean,
      value: input.transferAuthority ?? null,
    },
    perpetuals: {
      index: 4,
      isWritable: false as boolean,
      value: input.perpetuals ?? null,
    },
    pool: { index: 5, isWritable: true as boolean, value: input.pool ?? null },
    receivingCustody: {
      index: 6,
      isWritable: true as boolean,
      value: input.receivingCustody ?? null,
    },
    receivingCustodyDovesPriceAccount: {
      index: 7,
      isWritable: false as boolean,
      value: input.receivingCustodyDovesPriceAccount ?? null,
    },
    receivingCustodyPythnetPriceAccount: {
      index: 8,
      isWritable: false as boolean,
      value: input.receivingCustodyPythnetPriceAccount ?? null,
    },
    receivingCustodyTokenAccount: {
      index: 9,
      isWritable: true as boolean,
      value: input.receivingCustodyTokenAccount ?? null,
    },
    dispensingCustody: {
      index: 10,
      isWritable: true as boolean,
      value: input.dispensingCustody ?? null,
    },
    dispensingCustodyDovesPriceAccount: {
      index: 11,
      isWritable: false as boolean,
      value: input.dispensingCustodyDovesPriceAccount ?? null,
    },
    dispensingCustodyPythnetPriceAccount: {
      index: 12,
      isWritable: false as boolean,
      value: input.dispensingCustodyPythnetPriceAccount ?? null,
    },
    dispensingCustodyTokenAccount: {
      index: 13,
      isWritable: true as boolean,
      value: input.dispensingCustodyTokenAccount ?? null,
    },
    tokenProgram: {
      index: 14,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    eventAuthority: {
      index: 15,
      isWritable: false as boolean,
      value: input.eventAuthority ?? null,
    },
    program: {
      index: 16,
      isWritable: false as boolean,
      value: input.program ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: Swap2InstructionArgs = { ...input };

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getSwap2InstructionDataSerializer().serialize(
    resolvedArgs as Swap2InstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
