/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';
import {
  ClosePositionRequestParams,
  ClosePositionRequestParamsArgs,
  getClosePositionRequestParamsSerializer,
} from '../types';

// Accounts.
export type ClosePositionRequestInstructionAccounts = {
  keeper?: Signer;
  owner: PublicKey | Pda;
  ownerAta?: PublicKey | Pda;
  pool: PublicKey | Pda;
  positionRequest: PublicKey | Pda;
  positionRequestAta: PublicKey | Pda;
  position: PublicKey | Pda;
  tokenProgram: PublicKey | Pda;
  eventAuthority: PublicKey | Pda;
  program: PublicKey | Pda;
};

// Data.
export type ClosePositionRequestInstructionData = {
  discriminator: Uint8Array;
  params: ClosePositionRequestParams;
};

export type ClosePositionRequestInstructionDataArgs = {
  params: ClosePositionRequestParamsArgs;
};

export function getClosePositionRequestInstructionDataSerializer(): Serializer<
  ClosePositionRequestInstructionDataArgs,
  ClosePositionRequestInstructionData
> {
  return mapSerializer<
    ClosePositionRequestInstructionDataArgs,
    any,
    ClosePositionRequestInstructionData
  >(
    struct<ClosePositionRequestInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['params', getClosePositionRequestParamsSerializer()],
      ],
      { description: 'ClosePositionRequestInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([40, 105, 217, 188, 220, 45, 109, 110]),
    })
  ) as Serializer<
    ClosePositionRequestInstructionDataArgs,
    ClosePositionRequestInstructionData
  >;
}

// Args.
export type ClosePositionRequestInstructionArgs =
  ClosePositionRequestInstructionDataArgs;

// Instruction.
export function closePositionRequest(
  context: Pick<Context, 'programs'>,
  input: ClosePositionRequestInstructionAccounts &
    ClosePositionRequestInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey('perpetuals', '');

  // Accounts.
  const resolvedAccounts = {
    keeper: {
      index: 0,
      isWritable: false as boolean,
      value: input.keeper ?? null,
    },
    owner: {
      index: 1,
      isWritable: true as boolean,
      value: input.owner ?? null,
    },
    ownerAta: {
      index: 2,
      isWritable: true as boolean,
      value: input.ownerAta ?? null,
    },
    pool: { index: 3, isWritable: true as boolean, value: input.pool ?? null },
    positionRequest: {
      index: 4,
      isWritable: true as boolean,
      value: input.positionRequest ?? null,
    },
    positionRequestAta: {
      index: 5,
      isWritable: true as boolean,
      value: input.positionRequestAta ?? null,
    },
    position: {
      index: 6,
      isWritable: false as boolean,
      value: input.position ?? null,
    },
    tokenProgram: {
      index: 7,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    eventAuthority: {
      index: 8,
      isWritable: false as boolean,
      value: input.eventAuthority ?? null,
    },
    program: {
      index: 9,
      isWritable: false as boolean,
      value: input.program ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: ClosePositionRequestInstructionArgs = { ...input };

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getClosePositionRequestInstructionDataSerializer().serialize(
    resolvedArgs as ClosePositionRequestInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
