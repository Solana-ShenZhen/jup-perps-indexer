/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';
import {
  DecreasePosition3Params,
  DecreasePosition3ParamsArgs,
  getDecreasePosition3ParamsSerializer,
} from '../types';

// Accounts.
export type DecreasePosition3InstructionAccounts = {
  keeper: Signer;
  owner: PublicKey | Pda;
  transferAuthority: PublicKey | Pda;
  perpetuals: PublicKey | Pda;
  pool: PublicKey | Pda;
  positionRequest: PublicKey | Pda;
  positionRequestAta: PublicKey | Pda;
  position: PublicKey | Pda;
  custody: PublicKey | Pda;
  custodyOracleAccount: PublicKey | Pda;
  collateralCustody: PublicKey | Pda;
  collateralCustodyOracleAccount: PublicKey | Pda;
  collateralCustodyTokenAccount: PublicKey | Pda;
  tokenProgram: PublicKey | Pda;
  custodyPriceUpdate?: PublicKey | Pda;
  collateralCustodyPriceUpdate?: PublicKey | Pda;
  eventAuthority: PublicKey | Pda;
  program: PublicKey | Pda;
};

// Data.
export type DecreasePosition3InstructionData = {
  discriminator: Uint8Array;
  params: DecreasePosition3Params;
};

export type DecreasePosition3InstructionDataArgs = {
  params: DecreasePosition3ParamsArgs;
};

export function getDecreasePosition3InstructionDataSerializer(): Serializer<
  DecreasePosition3InstructionDataArgs,
  DecreasePosition3InstructionData
> {
  return mapSerializer<
    DecreasePosition3InstructionDataArgs,
    any,
    DecreasePosition3InstructionData
  >(
    struct<DecreasePosition3InstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['params', getDecreasePosition3ParamsSerializer()],
      ],
      { description: 'DecreasePosition3InstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([145, 243, 130, 119, 196, 220, 95, 118]),
    })
  ) as Serializer<
    DecreasePosition3InstructionDataArgs,
    DecreasePosition3InstructionData
  >;
}

// Args.
export type DecreasePosition3InstructionArgs =
  DecreasePosition3InstructionDataArgs;

// Instruction.
export function decreasePosition3(
  context: Pick<Context, 'programs'>,
  input: DecreasePosition3InstructionAccounts & DecreasePosition3InstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey('perpetuals', '');

  // Accounts.
  const resolvedAccounts = {
    keeper: {
      index: 0,
      isWritable: false as boolean,
      value: input.keeper ?? null,
    },
    owner: {
      index: 1,
      isWritable: true as boolean,
      value: input.owner ?? null,
    },
    transferAuthority: {
      index: 2,
      isWritable: false as boolean,
      value: input.transferAuthority ?? null,
    },
    perpetuals: {
      index: 3,
      isWritable: false as boolean,
      value: input.perpetuals ?? null,
    },
    pool: { index: 4, isWritable: true as boolean, value: input.pool ?? null },
    positionRequest: {
      index: 5,
      isWritable: true as boolean,
      value: input.positionRequest ?? null,
    },
    positionRequestAta: {
      index: 6,
      isWritable: true as boolean,
      value: input.positionRequestAta ?? null,
    },
    position: {
      index: 7,
      isWritable: true as boolean,
      value: input.position ?? null,
    },
    custody: {
      index: 8,
      isWritable: true as boolean,
      value: input.custody ?? null,
    },
    custodyOracleAccount: {
      index: 9,
      isWritable: false as boolean,
      value: input.custodyOracleAccount ?? null,
    },
    collateralCustody: {
      index: 10,
      isWritable: true as boolean,
      value: input.collateralCustody ?? null,
    },
    collateralCustodyOracleAccount: {
      index: 11,
      isWritable: false as boolean,
      value: input.collateralCustodyOracleAccount ?? null,
    },
    collateralCustodyTokenAccount: {
      index: 12,
      isWritable: true as boolean,
      value: input.collateralCustodyTokenAccount ?? null,
    },
    tokenProgram: {
      index: 13,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    custodyPriceUpdate: {
      index: 14,
      isWritable: false as boolean,
      value: input.custodyPriceUpdate ?? null,
    },
    collateralCustodyPriceUpdate: {
      index: 15,
      isWritable: false as boolean,
      value: input.collateralCustodyPriceUpdate ?? null,
    },
    eventAuthority: {
      index: 16,
      isWritable: false as boolean,
      value: input.eventAuthority ?? null,
    },
    program: {
      index: 17,
      isWritable: false as boolean,
      value: input.program ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: DecreasePosition3InstructionArgs = { ...input };

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getDecreasePosition3InstructionDataSerializer().serialize(
    resolvedArgs as DecreasePosition3InstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
