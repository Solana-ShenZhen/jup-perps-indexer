/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';
import {
  UpdateIncreasePositionRequestParams,
  UpdateIncreasePositionRequestParamsArgs,
  getUpdateIncreasePositionRequestParamsSerializer,
} from '../types';

// Accounts.
export type UpdateIncreasePositionRequestInstructionAccounts = {
  owner: Signer;
  perpetuals: PublicKey | Pda;
  pool: PublicKey | Pda;
  position: PublicKey | Pda;
  positionRequest: PublicKey | Pda;
  custody: PublicKey | Pda;
  custodyOracleAccount: PublicKey | Pda;
};

// Data.
export type UpdateIncreasePositionRequestInstructionData = {
  discriminator: Uint8Array;
  params: UpdateIncreasePositionRequestParams;
};

export type UpdateIncreasePositionRequestInstructionDataArgs = {
  params: UpdateIncreasePositionRequestParamsArgs;
};

export function getUpdateIncreasePositionRequestInstructionDataSerializer(): Serializer<
  UpdateIncreasePositionRequestInstructionDataArgs,
  UpdateIncreasePositionRequestInstructionData
> {
  return mapSerializer<
    UpdateIncreasePositionRequestInstructionDataArgs,
    any,
    UpdateIncreasePositionRequestInstructionData
  >(
    struct<UpdateIncreasePositionRequestInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['params', getUpdateIncreasePositionRequestParamsSerializer()],
      ],
      { description: 'UpdateIncreasePositionRequestInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([100, 110, 83, 102, 86, 7, 105, 157]),
    })
  ) as Serializer<
    UpdateIncreasePositionRequestInstructionDataArgs,
    UpdateIncreasePositionRequestInstructionData
  >;
}

// Args.
export type UpdateIncreasePositionRequestInstructionArgs =
  UpdateIncreasePositionRequestInstructionDataArgs;

// Instruction.
export function updateIncreasePositionRequest(
  context: Pick<Context, 'programs'>,
  input: UpdateIncreasePositionRequestInstructionAccounts &
    UpdateIncreasePositionRequestInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey('perpetuals', '');

  // Accounts.
  const resolvedAccounts = {
    owner: {
      index: 0,
      isWritable: false as boolean,
      value: input.owner ?? null,
    },
    perpetuals: {
      index: 1,
      isWritable: false as boolean,
      value: input.perpetuals ?? null,
    },
    pool: { index: 2, isWritable: false as boolean, value: input.pool ?? null },
    position: {
      index: 3,
      isWritable: false as boolean,
      value: input.position ?? null,
    },
    positionRequest: {
      index: 4,
      isWritable: true as boolean,
      value: input.positionRequest ?? null,
    },
    custody: {
      index: 5,
      isWritable: false as boolean,
      value: input.custody ?? null,
    },
    custodyOracleAccount: {
      index: 6,
      isWritable: false as boolean,
      value: input.custodyOracleAccount ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: UpdateIncreasePositionRequestInstructionArgs = {
    ...input,
  };

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data =
    getUpdateIncreasePositionRequestInstructionDataSerializer().serialize(
      resolvedArgs as UpdateIncreasePositionRequestInstructionDataArgs
    );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
