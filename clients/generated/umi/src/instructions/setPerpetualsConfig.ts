/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';
import {
  SetPerpetualsConfigParams,
  SetPerpetualsConfigParamsArgs,
  getSetPerpetualsConfigParamsSerializer,
} from '../types';

// Accounts.
export type SetPerpetualsConfigInstructionAccounts = {
  admin: Signer;
  perpetuals: PublicKey | Pda;
};

// Data.
export type SetPerpetualsConfigInstructionData = {
  discriminator: Uint8Array;
  params: SetPerpetualsConfigParams;
};

export type SetPerpetualsConfigInstructionDataArgs = {
  params: SetPerpetualsConfigParamsArgs;
};

export function getSetPerpetualsConfigInstructionDataSerializer(): Serializer<
  SetPerpetualsConfigInstructionDataArgs,
  SetPerpetualsConfigInstructionData
> {
  return mapSerializer<
    SetPerpetualsConfigInstructionDataArgs,
    any,
    SetPerpetualsConfigInstructionData
  >(
    struct<SetPerpetualsConfigInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['params', getSetPerpetualsConfigParamsSerializer()],
      ],
      { description: 'SetPerpetualsConfigInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([80, 72, 21, 191, 29, 121, 45, 111]),
    })
  ) as Serializer<
    SetPerpetualsConfigInstructionDataArgs,
    SetPerpetualsConfigInstructionData
  >;
}

// Args.
export type SetPerpetualsConfigInstructionArgs =
  SetPerpetualsConfigInstructionDataArgs;

// Instruction.
export function setPerpetualsConfig(
  context: Pick<Context, 'programs'>,
  input: SetPerpetualsConfigInstructionAccounts &
    SetPerpetualsConfigInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey('perpetuals', '');

  // Accounts.
  const resolvedAccounts = {
    admin: {
      index: 0,
      isWritable: false as boolean,
      value: input.admin ?? null,
    },
    perpetuals: {
      index: 1,
      isWritable: true as boolean,
      value: input.perpetuals ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: SetPerpetualsConfigInstructionArgs = { ...input };

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getSetPerpetualsConfigInstructionDataSerializer().serialize(
    resolvedArgs as SetPerpetualsConfigInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
