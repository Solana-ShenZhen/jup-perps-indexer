/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';
import {
  AddCustodyParams,
  AddCustodyParamsArgs,
  getAddCustodyParamsSerializer,
} from '../types';

// Accounts.
export type AddCustodyInstructionAccounts = {
  admin: Signer;
  transferAuthority: PublicKey | Pda;
  perpetuals: PublicKey | Pda;
  pool: PublicKey | Pda;
  custody: PublicKey | Pda;
  custodyTokenAccount: PublicKey | Pda;
  custodyTokenMint: PublicKey | Pda;
  systemProgram: PublicKey | Pda;
  tokenProgram: PublicKey | Pda;
  rent: PublicKey | Pda;
};

// Data.
export type AddCustodyInstructionData = {
  discriminator: Uint8Array;
  params: AddCustodyParams;
};

export type AddCustodyInstructionDataArgs = { params: AddCustodyParamsArgs };

export function getAddCustodyInstructionDataSerializer(): Serializer<
  AddCustodyInstructionDataArgs,
  AddCustodyInstructionData
> {
  return mapSerializer<
    AddCustodyInstructionDataArgs,
    any,
    AddCustodyInstructionData
  >(
    struct<AddCustodyInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['params', getAddCustodyParamsSerializer()],
      ],
      { description: 'AddCustodyInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([247, 254, 126, 17, 26, 6, 215, 117]),
    })
  ) as Serializer<AddCustodyInstructionDataArgs, AddCustodyInstructionData>;
}

// Args.
export type AddCustodyInstructionArgs = AddCustodyInstructionDataArgs;

// Instruction.
export function addCustody(
  context: Pick<Context, 'programs'>,
  input: AddCustodyInstructionAccounts & AddCustodyInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey('perpetuals', '');

  // Accounts.
  const resolvedAccounts = {
    admin: {
      index: 0,
      isWritable: true as boolean,
      value: input.admin ?? null,
    },
    transferAuthority: {
      index: 1,
      isWritable: false as boolean,
      value: input.transferAuthority ?? null,
    },
    perpetuals: {
      index: 2,
      isWritable: false as boolean,
      value: input.perpetuals ?? null,
    },
    pool: { index: 3, isWritable: true as boolean, value: input.pool ?? null },
    custody: {
      index: 4,
      isWritable: true as boolean,
      value: input.custody ?? null,
    },
    custodyTokenAccount: {
      index: 5,
      isWritable: true as boolean,
      value: input.custodyTokenAccount ?? null,
    },
    custodyTokenMint: {
      index: 6,
      isWritable: false as boolean,
      value: input.custodyTokenMint ?? null,
    },
    systemProgram: {
      index: 7,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
    tokenProgram: {
      index: 8,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    rent: { index: 9, isWritable: false as boolean, value: input.rent ?? null },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: AddCustodyInstructionArgs = { ...input };

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getAddCustodyInstructionDataSerializer().serialize(
    resolvedArgs as AddCustodyInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
