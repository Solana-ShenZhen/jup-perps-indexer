/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';
import {
  SetCustodyConfigParams,
  SetCustodyConfigParamsArgs,
  getSetCustodyConfigParamsSerializer,
} from '../types';

// Accounts.
export type SetCustodyConfigInstructionAccounts = {
  admin: Signer;
  perpetuals: PublicKey | Pda;
  custody: PublicKey | Pda;
};

// Data.
export type SetCustodyConfigInstructionData = {
  discriminator: Uint8Array;
  params: SetCustodyConfigParams;
};

export type SetCustodyConfigInstructionDataArgs = {
  params: SetCustodyConfigParamsArgs;
};

export function getSetCustodyConfigInstructionDataSerializer(): Serializer<
  SetCustodyConfigInstructionDataArgs,
  SetCustodyConfigInstructionData
> {
  return mapSerializer<
    SetCustodyConfigInstructionDataArgs,
    any,
    SetCustodyConfigInstructionData
  >(
    struct<SetCustodyConfigInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['params', getSetCustodyConfigParamsSerializer()],
      ],
      { description: 'SetCustodyConfigInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([133, 97, 130, 143, 215, 229, 36, 176]),
    })
  ) as Serializer<
    SetCustodyConfigInstructionDataArgs,
    SetCustodyConfigInstructionData
  >;
}

// Args.
export type SetCustodyConfigInstructionArgs =
  SetCustodyConfigInstructionDataArgs;

// Instruction.
export function setCustodyConfig(
  context: Pick<Context, 'programs'>,
  input: SetCustodyConfigInstructionAccounts & SetCustodyConfigInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey('perpetuals', '');

  // Accounts.
  const resolvedAccounts = {
    admin: {
      index: 0,
      isWritable: true as boolean,
      value: input.admin ?? null,
    },
    perpetuals: {
      index: 1,
      isWritable: false as boolean,
      value: input.perpetuals ?? null,
    },
    custody: {
      index: 2,
      isWritable: true as boolean,
      value: input.custody ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: SetCustodyConfigInstructionArgs = { ...input };

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getSetCustodyConfigInstructionDataSerializer().serialize(
    resolvedArgs as SetCustodyConfigInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
