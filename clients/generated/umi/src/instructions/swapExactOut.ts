/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';
import {
  SwapExactOutParams,
  SwapExactOutParamsArgs,
  getSwapExactOutParamsSerializer,
} from '../types';

// Accounts.
export type SwapExactOutInstructionAccounts = {
  owner: Signer;
  fundingAccount: PublicKey | Pda;
  receivingAccount: PublicKey | Pda;
  transferAuthority: PublicKey | Pda;
  perpetuals: PublicKey | Pda;
  pool: PublicKey | Pda;
  receivingCustody: PublicKey | Pda;
  receivingCustodyOracleAccount: PublicKey | Pda;
  receivingCustodyTokenAccount: PublicKey | Pda;
  dispensingCustody: PublicKey | Pda;
  dispensingCustodyOracleAccount: PublicKey | Pda;
  dispensingCustodyTokenAccount: PublicKey | Pda;
  tokenProgram: PublicKey | Pda;
  eventAuthority: PublicKey | Pda;
  program: PublicKey | Pda;
};

// Data.
export type SwapExactOutInstructionData = {
  discriminator: Uint8Array;
  params: SwapExactOutParams;
};

export type SwapExactOutInstructionDataArgs = {
  params: SwapExactOutParamsArgs;
};

export function getSwapExactOutInstructionDataSerializer(): Serializer<
  SwapExactOutInstructionDataArgs,
  SwapExactOutInstructionData
> {
  return mapSerializer<
    SwapExactOutInstructionDataArgs,
    any,
    SwapExactOutInstructionData
  >(
    struct<SwapExactOutInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['params', getSwapExactOutParamsSerializer()],
      ],
      { description: 'SwapExactOutInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([250, 73, 101, 33, 38, 207, 75, 184]),
    })
  ) as Serializer<SwapExactOutInstructionDataArgs, SwapExactOutInstructionData>;
}

// Args.
export type SwapExactOutInstructionArgs = SwapExactOutInstructionDataArgs;

// Instruction.
export function swapExactOut(
  context: Pick<Context, 'programs'>,
  input: SwapExactOutInstructionAccounts & SwapExactOutInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey('perpetuals', '');

  // Accounts.
  const resolvedAccounts = {
    owner: {
      index: 0,
      isWritable: false as boolean,
      value: input.owner ?? null,
    },
    fundingAccount: {
      index: 1,
      isWritable: true as boolean,
      value: input.fundingAccount ?? null,
    },
    receivingAccount: {
      index: 2,
      isWritable: true as boolean,
      value: input.receivingAccount ?? null,
    },
    transferAuthority: {
      index: 3,
      isWritable: false as boolean,
      value: input.transferAuthority ?? null,
    },
    perpetuals: {
      index: 4,
      isWritable: false as boolean,
      value: input.perpetuals ?? null,
    },
    pool: { index: 5, isWritable: true as boolean, value: input.pool ?? null },
    receivingCustody: {
      index: 6,
      isWritable: true as boolean,
      value: input.receivingCustody ?? null,
    },
    receivingCustodyOracleAccount: {
      index: 7,
      isWritable: false as boolean,
      value: input.receivingCustodyOracleAccount ?? null,
    },
    receivingCustodyTokenAccount: {
      index: 8,
      isWritable: true as boolean,
      value: input.receivingCustodyTokenAccount ?? null,
    },
    dispensingCustody: {
      index: 9,
      isWritable: true as boolean,
      value: input.dispensingCustody ?? null,
    },
    dispensingCustodyOracleAccount: {
      index: 10,
      isWritable: false as boolean,
      value: input.dispensingCustodyOracleAccount ?? null,
    },
    dispensingCustodyTokenAccount: {
      index: 11,
      isWritable: true as boolean,
      value: input.dispensingCustodyTokenAccount ?? null,
    },
    tokenProgram: {
      index: 12,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    eventAuthority: {
      index: 13,
      isWritable: false as boolean,
      value: input.eventAuthority ?? null,
    },
    program: {
      index: 14,
      isWritable: false as boolean,
      value: input.program ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: SwapExactOutInstructionArgs = { ...input };

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getSwapExactOutInstructionDataSerializer().serialize(
    resolvedArgs as SwapExactOutInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
