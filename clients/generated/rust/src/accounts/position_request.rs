//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>
//!

use crate::generated::types::RequestChange;
use crate::generated::types::RequestType;
use crate::generated::types::Side;
use borsh::BorshDeserialize;
use borsh::BorshSerialize;
use solana_program::pubkey::Pubkey;

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct PositionRequest {
    pub discriminator: [u8; 8],
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    // The public key / address for the trader's wallet
    pub owner: Pubkey,
    // The public key / address for the Jupiter Perpetuals liquidity pool account
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub pool: Pubkey,
    // The public key / address for the position request position's custody account
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub custody: Pubkey,
    // The Position account contains the trade position data for a given token
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub position: Pubkey,
    // For opening positions and collateral deposits, mint is equal to the input mint requested by the trader
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub mint: Pubkey,
    // The UNIX timestamp for when the position request is created
    pub open_time: i64,
    // The UNIX timestamp for when the position is last updated
    pub update_time: i64,
    // The USD amount to increase or decrease the position size by
    pub size_usd_delta: u64,
    // For opening positions and collateral deposits,collateralDelta is the token amount to increase or decrease the position collateral size by
    pub collateral_delta: u64,
    // requestChange will be equal to Increase for open position and collateral deposit requests, and Decrease for close position and collateral withdrawal requests
    pub request_change: RequestChange,
    // Market for all position requests except for TP / SL requests, which have a Trigger requestType
    pub request_type: RequestType,
    // Long for long positions, Short for short positions
    pub side: Side,
    // The maximum price with slippage for the position request when opening, closing, or updating the position size
    pub price_slippage: Option<u64>,
    // For requests that require token swaps
    pub jupiter_minimum_out: Option<u64>,
    // This is an internal attribute used by the program to calculate the collateralDelta for position requests that require token swaps
    pub pre_swap_amount: Option<u64>,
    // The price (USD) used for TP / SL position requests
    pub trigger_price: Option<u64>,
    /*
    When triggerAboveThreshold is true, the TP / SL position request will be triggered when the position's token price is greater than or equal to triggerPrice. When triggerAboveThreshold is false, the TP / SL position request will be triggered when the position's token price is less than or equal to triggerPrice
    */
    pub trigger_above_threshold: Option<bool>,
    /*
    This attribute is only checked when closing or decreasing position sizes. When entirePosition is true, the entire position will be closed (i.e. a close position request). When entirePosition is false, the position size will be reduced according to sizeUsdDelta
    */
    pub entire_position: Option<bool>,
    // Determines whether the position request is executed or not
    pub executed: bool,
    // The random integer seed used to derive the position request address
    pub counter: u64,
    // The bump seed used to derive the position request address
    pub bump: u8,
    pub referral: Option<Pubkey>,
}

impl PositionRequest {
    #[inline(always)]
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        let mut data = data;
        Self::deserialize(&mut data)
    }
}

impl<'a> TryFrom<&solana_program::account_info::AccountInfo<'a>> for PositionRequest {
    type Error = std::io::Error;

    fn try_from(
        account_info: &solana_program::account_info::AccountInfo<'a>,
    ) -> Result<Self, Self::Error> {
        let mut data: &[u8] = &(*account_info.data).borrow();
        Self::deserialize(&mut data)
    }
}

#[cfg(feature = "anchor")]
impl anchor_lang::AccountDeserialize for PositionRequest {
    fn try_deserialize_unchecked(buf: &mut &[u8]) -> anchor_lang::Result<Self> {
        Ok(Self::deserialize(buf)?)
    }
}

#[cfg(feature = "anchor")]
impl anchor_lang::AccountSerialize for PositionRequest {}

#[cfg(feature = "anchor")]
impl anchor_lang::Owner for PositionRequest {
    fn owner() -> Pubkey {
        crate::PERPETUALS_ID
    }
}

#[cfg(feature = "anchor-idl-build")]
impl anchor_lang::IdlBuild for PositionRequest {}

#[cfg(feature = "anchor-idl-build")]
impl anchor_lang::Discriminator for PositionRequest {
    const DISCRIMINATOR: [u8; 8] = [0; 8];
}
