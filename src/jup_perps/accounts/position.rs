//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>
//!

use super::Pool;
use crate::jup_perps::programs::PERPETUALS_ID;
use crate::jup_perps::types::Side;
use borsh::BorshDeserialize;
use borsh::BorshSerialize;
use solana_program::pubkey::Pubkey;

/// Represents a trading position for a specific token in the perpetual futures market.
#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct Position {
    pub discriminator: [u8; 8],
    /// The public key of the position owner.
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub owner: Pubkey,
    /// The public key of the associated pool.
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub pool: Pubkey,
    /// The public key of the custody account.
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub custody: Pubkey,
    /// The public key of the collateral custody account.
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub collateral_custody: Pubkey,
    /// Timestamp when the position was opened.
    pub open_time: i64,
    /// Timestamp of the last update to the position.
    pub update_time: i64,
    /// The side of the position (Long or Short).
    pub side: Side,
    /// The price at which the position was opened.
    pub price: u64,
    /// The size of the position in USD.
    /// sizeUsd: The position size after leverage in USD and integer format as explained in price.
    /// A position with sizeUsd = 0 is treated as a closed position.
    pub size_usd: u64,
    /// The position's collateral size after fees in USD and integer format as explained in price.
    /// This represents the actual amount of collateral backing the position after accounting for any fees.
    pub collateral_usd: u64,
    /// The realized profit and loss in USD.
    pub realised_pnl_usd: i64,
    /// Snapshot of cumulative interest at the time of position creation.
    pub cumulative_interest_snapshot: u128,
    /// The amount of tokens locked in the position.
    pub locked_amount: u64,
    /// Bump seed for PDA derivation.
    pub bump: u8,
}

impl Position {
    pub fn create_pda(
        custody: Pubkey,
        collateral_custody: Pubkey,
        wallet_address: Pubkey,
        side: Side,
        bump: u8,
    ) -> Result<solana_program::pubkey::Pubkey, solana_program::pubkey::PubkeyError> {
        solana_program::pubkey::Pubkey::create_program_address(
            &[
                b"position",
                wallet_address.as_ref(),
                Pool::ADDRESS.as_ref(),
                custody.as_ref(),
                collateral_custody.as_ref(),
                &[match side {
                    Side::Long => 1,
                    Side::Short => 2,
                    _ => unreachable!("Side::None should not be used in create_pda"),
                }],
                &[bump],
            ],
            &PERPETUALS_ID,
        )
    }

    pub fn find_pda(
        custody: Pubkey,
        collateral_custody: Pubkey,
        wallet_address: Pubkey,
        side: Side,
    ) -> (solana_program::pubkey::Pubkey, u8) {
        solana_program::pubkey::Pubkey::find_program_address(
            &[
                b"position",
                wallet_address.as_ref(),
                Pool::ADDRESS.as_ref(),
                custody.as_ref(),
                collateral_custody.as_ref(),
                &[match side {
                    Side::Long => 1,
                    Side::Short => 2,
                    _ => unreachable!("Side::None should not be used in find_pda"),
                }],
            ],
            &PERPETUALS_ID,
        )
    }

    #[inline(always)]
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        let mut data = data;
        Self::deserialize(&mut data)
    }
}

impl<'a> TryFrom<&solana_program::account_info::AccountInfo<'a>> for Position {
    type Error = std::io::Error;

    fn try_from(
        account_info: &solana_program::account_info::AccountInfo<'a>,
    ) -> Result<Self, Self::Error> {
        let mut data: &[u8] = &(*account_info.data).borrow();
        Self::deserialize(&mut data)
    }
}

#[cfg(feature = "anchor")]
impl anchor_lang::AccountDeserialize for Position {
    fn try_deserialize_unchecked(buf: &mut &[u8]) -> anchor_lang::Result<Self> {
        Ok(Self::deserialize(buf)?)
    }
}

#[cfg(feature = "anchor")]
impl anchor_lang::AccountSerialize for Position {}

#[cfg(feature = "anchor")]
impl anchor_lang::Owner for Position {
    fn owner() -> Pubkey {
        crate::PERPETUALS_ID
    }
}

#[cfg(feature = "anchor-idl-build")]
impl anchor_lang::IdlBuild for Position {}

#[cfg(feature = "anchor-idl-build")]
impl anchor_lang::Discriminator for Position {
    const DISCRIMINATOR: [u8; 8] = [0; 8];
}
