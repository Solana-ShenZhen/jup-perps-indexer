//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>
//!

use crate::jup_perps::types::Fees;
use crate::jup_perps::types::Limit;
use crate::jup_perps::types::PoolApr;
use borsh::BorshDeserialize;
use borsh::BorshSerialize;
use solana_program::pubkey;
use solana_program::pubkey::Pubkey;

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct Pool {
    pub discriminator: [u8; 8],
    /// Name of the pool
    pub name: String,
    /// List of custody account public keys associated with this pool
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<Vec<serde_with::DisplayFromStr>>")
    )]
    pub custodies: Vec<Pubkey>,
    /// Assets Under Management in USD (represented as a u128)
    pub aum_usd: u128,
    /// Limit settings for the pool
    pub limit: Limit,
    /// Fee structure for the pool
    pub fees: Fees,
    /// Annual Percentage Rate (APR) settings for the pool
    pub pool_apr: PoolApr,
    /// Maximum time (in seconds) allowed for request execution
    pub max_request_execution_sec: i64,
    /// Bump seed for PDA derivation
    pub bump: u8,
    /// Bump seed for LP token PDA derivation
    pub lp_token_bump: u8,
    /// Timestamp of when the pool was created
    pub inception_time: i64,
}

impl Pool {
    pub const ADDRESS: Pubkey = pubkey!("5BUwFW4nRbftYTDMbgxykoFWqWHPzahFSNAaaaJtVKsq");

    #[inline(always)]
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        let mut data = data;
        Self::deserialize(&mut data)
    }
}

impl<'a> TryFrom<&solana_program::account_info::AccountInfo<'a>> for Pool {
    type Error = std::io::Error;

    fn try_from(
        account_info: &solana_program::account_info::AccountInfo<'a>,
    ) -> Result<Self, Self::Error> {
        let mut data: &[u8] = &(*account_info.data).borrow();
        Self::deserialize(&mut data)
    }
}

#[cfg(feature = "anchor")]
impl anchor_lang::AccountDeserialize for Pool {
    fn try_deserialize_unchecked(buf: &mut &[u8]) -> anchor_lang::Result<Self> {
        Ok(Self::deserialize(buf)?)
    }
}

#[cfg(feature = "anchor")]
impl anchor_lang::AccountSerialize for Pool {}

#[cfg(feature = "anchor")]
impl anchor_lang::Owner for Pool {
    fn owner() -> Pubkey {
        crate::PERPETUALS_ID
    }
}

#[cfg(feature = "anchor-idl-build")]
impl anchor_lang::IdlBuild for Pool {}

#[cfg(feature = "anchor-idl-build")]
impl anchor_lang::Discriminator for Pool {
    const DISCRIMINATOR: [u8; 8] = [0; 8];
}
