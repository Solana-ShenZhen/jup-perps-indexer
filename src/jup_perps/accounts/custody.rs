//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>
//!

use crate::jup_perps::types::Assets;
use crate::jup_perps::types::FundingRateState;
use crate::jup_perps::types::OracleParams;
use crate::jup_perps::types::Permissions;
use crate::jup_perps::types::PricingParams;
use borsh::BorshDeserialize;
use borsh::BorshSerialize;
use solana_program::pubkey;
use solana_program::pubkey::Pubkey;
use solana_program::pubkey;

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct Custody {
    pub discriminator: [u8; 8],
    /// The public key of the associated pool
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub pool: Pubkey,
    /// The public key of the token mint
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub mint: Pubkey,
    /// The public key of the token account
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub token_account: Pubkey,
    /// The number of decimal places for the token
    pub decimals: u8,
    /// Whether the token is a stablecoin
    pub is_stable: bool,
    /// Oracle parameters for price feeds
    pub oracle: OracleParams,
    /// Parameters for pricing calculations
    pub pricing: PricingParams,
    /// Permissions for various operations
    pub permissions: Permissions,
    /// Target ratio in basis points
    pub target_ratio_bps: u64,
    /// Asset information
    pub assets: Assets,
    /// State of the funding rate
    pub funding_rate_state: FundingRateState,
    /// Bump seed for PDA derivation
    pub bump: u8,
    /// Bump seed for token account PDA derivation
    pub token_account_bump: u8,
}

impl Custody {
<<<<<<< HEAD
    pub const SOL_ADDRESS: Pubkey = pubkey!("7xS2gz2bTp3fwCC7knJvUWTEU9Tycczu6VhJYKgi1wdz");
    pub const ETH_ADDRESS: Pubkey = pubkey!("AQCGyheWPLeo6Qp9WpYS9m3Qj479t7R636N9ey1rEjEn");
    pub const BTC_ADDRESS: Pubkey = pubkey!("5Pv3gM9JrFFH883SWAhvJC9RPYmo8UNxuFtv5bMMALkm");
    pub const USDC_ADDRESS: Pubkey = pubkey!("G18jKKXQwBbrHeiK3C9MRXhkHsLHf7XgCSisykV46EZa");
    pub const USDT_ADDRESS: Pubkey = pubkey!("4vkNeXiYEUizLdrpdPS1eC2mccyM4NUPRtERrk6ZETkk");
=======
    pub const ADDRESS: Pubkey = pubkey!("7xS2gz2bTp3fwCC7knJvUWTEU9Tycczu6VhJYKgi1wdz");
>>>>>>> 88eeaa0 (added create_increase_position_market_request)

    #[inline(always)]
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        let mut data = data;
        Self::deserialize(&mut data)
    }
}

impl<'a> TryFrom<&solana_program::account_info::AccountInfo<'a>> for Custody {
    type Error = std::io::Error;

    fn try_from(
        account_info: &solana_program::account_info::AccountInfo<'a>,
    ) -> Result<Self, Self::Error> {
        let mut data: &[u8] = &(*account_info.data).borrow();
        Self::deserialize(&mut data)
    }
}

#[cfg(feature = "anchor")]
impl anchor_lang::AccountDeserialize for Custody {
    fn try_deserialize_unchecked(buf: &mut &[u8]) -> anchor_lang::Result<Self> {
        Ok(Self::deserialize(buf)?)
    }
}

#[cfg(feature = "anchor")]
impl anchor_lang::AccountSerialize for Custody {}

#[cfg(feature = "anchor")]
impl anchor_lang::Owner for Custody {
    fn owner() -> Pubkey {
        crate::PERPETUALS_ID
    }
}

#[cfg(feature = "anchor-idl-build")]
impl anchor_lang::IdlBuild for Custody {}

#[cfg(feature = "anchor-idl-build")]
impl anchor_lang::Discriminator for Custody {
    const DISCRIMINATOR: [u8; 8] = [0; 8];
}
